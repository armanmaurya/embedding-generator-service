name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/embedding-generator-service

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure package visibility
      run: |
        echo "Logging in to GHCR with actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        echo "Image will be: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "MAJOR_MINOR=${VERSION%.*}" >> $GITHUB_OUTPUT
        echo "MAJOR=${VERSION%%.*}" >> $GITHUB_OUTPUT

    - name: Extract metadata for release
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.version.outputs.VERSION }}
          type=raw,value=${{ steps.version.outputs.MAJOR_MINOR }}
          type=raw,value=${{ steps.version.outputs.MAJOR }}
          type=raw,value=latest
          type=raw,value=stable

    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## ðŸš€ Release ${{ steps.version.outputs.VERSION }}
          
          ### Docker Images
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.MAJOR_MINOR }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.MAJOR }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable`
          
          ### Usage
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ```
        draft: false
        prerelease: false

    - name: Release notification
      run: |
        echo "ðŸŽ‰ Release ${{ steps.version.outputs.VERSION }} created successfully!"
        echo "ðŸ“¦ Docker images:"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.MAJOR_MINOR }}"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.MAJOR }}"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable"
